local ExploitFunctions = {}

httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

function ExploitFunctions.ServerHop_IY()
	if not httprequest then
		warn("Incompatible Exploit", "Your exploit does not support this command (missing request)")
		return
	end

	local servers = {}
	local req = httprequest({
		Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", game.PlaceId)
	})
	local body = game:GetService("HttpService"):JSONDecode(req.Body)

	if body and body.data then
		for _, v in ipairs(body.data) do
			if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
				table.insert(servers, v.id)
			end
		end
	end

	if #servers > 0 then
		game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game.Players.LocalPlayer)
	else
		warn("Serverhop", "Couldn't find a server.")
	end
end


function ExploitFunctions.Message(url, message)
	local http = game:GetService("HttpService")
	local headers = {
		["Content-Type"] = "application/json"
	}
	local data = {
		["content"] = message,
	}

	local body = http:JSONEncode(data)
	local response = request({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
end

function ExploitFunctions.Webhook(url, embed)
	--print("request_s7FDk")

	local http = game:GetService("HttpService")
	local headers = {
		["Content-Type"] = "application/json"
	}
	local data = {
		["embeds"] = {
			{
				["title"] = embed.title,
				["description"] = embed.description,
				["color"] = embed.color,
				["fields"] = embed.fields,
				["footer"] = {
					["text"] = embed.footer.text
				}
			}
		}
	}
	local body = http:JSONEncode(data)
	local response = request({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
end

return ExploitFunctions
